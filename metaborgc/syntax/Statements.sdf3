module Statements
imports Expressions Common Declarations
context-free syntax

	Stm = <<MemberStm>> {prefer}
	Stm = <<LabeledStm>>
	Stm = <<CompoundStm>>
	Stm = <<ExpStm>>
	Stm = <<SelectionStm>>
	Stm = <<IterStm>>
	Stm = <<JmpStm>>
	Stm.Sys = <<ID>(<ID>)<CompoundStm>>
	
	
	MemberStm.MemberStm = <<AccessSpecifier> : <Compound>>
	
	AccessSpecifier.Public = "public"
	AccessSpecifier.Private = "private"
	AccessSpecifier.Protected = "protected"
	
	LabeledStm.Label   = <<ID> : <Stm>>
	LabeledStm.Case    = <case <ConstExp> : <Stm>>
	LabeledStm.Default = <default : <Stm>>
	
	CompoundStm.Block = 
		<
			{
				<{BlockItem "\n"}*>
			}
		>
	
	Compound = <<{BlockItem "\n"}*>>
		
	BlockItem = <<Decl>>
	BlockItem = <<Stm>>
	
	ExpStm.ExpStm = <<Exp>;>
	
	// Prefer If to prevent ambiguity between If and IfElse.
	SelectionStm.If     = <if(<Exp>) <Stm>> {prefer}
	SelectionStm.IfElse = <if(<Exp>) <Stm> else <Stm>>
	SelectionStm.Switch = <switch(<Exp>) <Stm>>
	
	IterStm.While   = <while(<Exp>) <Stm>>
	IterStm.Do      = <do <Stm> while(<Exp>)>
	IterStm.For     = <for(<Exp?>; <Exp?>; <Exp?>) <Stm>>
	IterStm.DeclFor = <for(<Decl> <Exp?>; <Exp?>) <Stm>>
	
	JmpStm.Goto     = <goto <ID>;>
	JmpStm.Continue = <continue;>
	JmpStm.Break    = <break;>
	JmpStm.Return   = <return <Exp?>;>