[
   C-PointerOf                          -- H hs=0[KW["*"] _1],
   C-PointerOf.1:iter-star              -- _1,
   C-Pointer                            -- _1 _2,
   C-Pointer.1:iter                     -- _1,
   C-Pointer.2:opt                      -- _1,
   C-Pointer.2:opt.1:alt                -- _1 _1,
   C-ParamListVarArgs                   -- H hs=0[KW["("] _1 KW[","] KW["..."] KW[")"]],
   C-ParamListVarArgs.1:iter-sep        -- H hs=0[_1 KW[","]],
   C-ParamList                          -- H hs=0[KW["("] H[_1] KW[")"]],
   C-ParamList.1:iter-star-sep          -- H hs=0[_1 KW[","]],
   C-ArrayDecl                          -- H hs=0[_1 KW["["] _2 KW["]"]],
   C-ArrayDecl.1:opt                    -- _1,
   C-ArrayDecl.2:opt                    -- _1,
   C-DeclBracket                        -- KW["("] _1 KW[")"],
   C-FunType                            -- KW["("] _1 KW[")"] _2,
   C-ParamDecl                          -- H[_1 _2],
   C-ParamDecl.2:opt                    -- _1,
   C-ParamDecl.2:opt.1:alt              -- _1 _1,
   C-ParamDecl2.1:alt                   -- _1 _1,
   C-ParamDecl2                         -- _1 _2,
   C-TypeName                           -- _1 _2,
   C-TypeName1                          -- _1 _2,
   C-TypeName1.1:iter                   -- _1,
   C-TypeName.2:opt                     -- _1,
   C-TypeName1.2:opt                    -- _1,
   C-Enum                               -- KW["enum"] _1 KW["{"] _2 KW["}"],
   C-Enum.1:opt                         -- _1,
   C-Enum.2:iter-sep                    -- _1 KW[","],
   C-EnumId                             -- KW["enum"] _1,
   C-Enumerator                         -- _1 _2,
   C-Enumerator.2:opt                   -- _1,
   C-EnumVal                            -- KW["="] _1,
   C-Struct                             -- V[V is=2[V[H[KW["struct"] _1] KW["{"]] _2] KW["}"]],
   C-Struct.1:opt                       -- _1,
   C-Struct.2:iter                      -- _1,
   C-StructId                           -- H hs=1[KW["struct"] _1],
   C-Union                              -- V[V is=2[V[H[KW["union"] _1] KW["{"]] _2] KW["}"]],
   C-Union.1:opt                        -- _1,
   C-Union.2:iter                       -- _1,
   C-UnionId                            -- KW["union"] _1,
   C-MemDecl                            -- H [_1 H hs=0[_2 KW[";"]]],
   C-MemDecl.2:iter-sep                 -- _1 KW[","],
   C-MemDecl1                            -- H [_1 H hs=0[_2 KW[";"]]],
   C-MemDecl1.1:iter                     -- _1,
   C-MemDecl1.2:iter-sep                 -- _1 KW[","],
   C-BitFieldSize                       -- _1 KW[":"] _2,
   C-BitFieldSize.1:opt                 -- _1,
   C-ArrayIndex                         -- H hs=0[_1 KW["["] _2 KW["]"]],
   C-FunCall                            -- H hs=0[_1 KW["("] H[_2] KW[")"]],
   C-FunCall.2:iter-star-sep            -- H hs=0[_1 ","],
   C-Field                              -- H hs=0[_1 KW["."] _2],
   C-DerefMember                        -- H hs=0[_1 KW["->"] _2],
   C-PostIncr                           -- H hs=0[_1 KW["++"]],
   C-PostDecr                           -- H hs=0[_1 KW["--"]],
   C-PreIncr                            -- H hs=0[KW["++"] _1],
   C-PreDecr                            -- H hs=0[KW["--"] _1],
   C-Address                            -- H hs=0[KW["&"] "(" _1 ")"],
   C-Deref                              -- H hs=0[KW["*"] "(" _1 ")"],
   C-Positive                           -- H hs=0[KW["+"] "(" _1 ")"],
   C-Negative                           -- H hs=0[KW["-"] "(" _1 ")"],
   C-Tilde                              -- H hs=0[KW["~"] "(" _1 ")"],
   C-Negation                           -- H hs=0[KW["!"] "(" _1 ")"],
   C-SizeofExp                          -- KW["sizeof"] _1,
   C-SizeofType                         -- H hs=0[KW["sizeof"] KW["("] _1 KW[")"]],
   C-TypeCast                           -- H hs=0[KW["("] _1 KW[")"]] _2,
   C-Mul                                -- H hs=0 ["(" H[_1 KW["*"] _2] ")"],
   C-Div                                -- H hs=0 ["(" H[_1 KW["/"] _2] ")"],
   C-Mod                                -- H hs=0 ["(" H[_1 KW["%"] _2] ")"],
   C-Add                                -- H hs=0 ["(" H[_1 KW["+"] _2] ")"],
   C-Subt                               -- H hs=0 ["(" H[_1 KW["-"] _2] ")"],
   C-ShiftLeft                          -- H hs=0 ["(" H[_1 KW["<<"] _2] ")"],
   C-ShiftRight                         -- H hs=0 ["(" H[_1 KW[">>"] _2] ")"],
   C-Lt                                 -- H hs=0 ["(" H[_1 KW["<"] _2] ")"],
   C-Gt                                 -- H hs=0 ["(" H[_1 KW[">"] _2] ")"],
   C-Le                                 -- H hs=0 ["(" H[_1 KW["<="] _2] ")"],
   C-Ge                                 -- H hs=0 ["(" H[_1 KW[">="] _2] ")"],
   C-Equal                              -- H hs=0 ["(" H[_1 KW["=="] _2] ")"],
   C-NotEqual                           -- H hs=0 ["(" H[_1 KW["!="] _2] ")"],
   C-And                                -- H hs=0 ["(" H[_1 KW["&"] _2] ")"],
   C-ExOr                               -- H hs=0 ["(" H[_1 KW["^"] _2] ")"],
   C-IncOr                              -- H hs=0 ["(" H[_1 KW["|"] _2] ")"],
   C-LAnd                               -- H hs=0 ["(" H[_1 KW["&&"] _2] ")"],
   C-LOr                                -- H hs=0 ["(" H[_1 KW["||"] _2] ")"],
   C-IfExp                              -- H hs=0 ["(" H[_1 KW["?"] _2 KW[":"] _3] ")"],
   C-Assign                             -- H[_1 _2 _3],
   C-AssignEq                           -- KW["="],
   C-AssignMul                          -- KW["*="],
   C-AssignDiv                          -- KW["/="],
   C-AssignMod                          -- KW["%="],
   C-AssignPlus                         -- KW["+="],
   C-AssignMin                          -- KW["-="],
   C-AssignSL                           -- KW["<<="],
   C-AssignSR                           -- KW[">>="],
   C-AssignAnd                          -- KW["&="],
   C-AssignExp                          -- KW["^="],
   C-AssignOr                           -- KW["|="],
   C-Comma                              -- _1 KW[","] _2,
   C-EmptyExp                           -- ,
   C-Typedef                            -- KW["typedef"],
   C-Extern                             -- KW["extern"],
   C-Static                             -- KW["static"],
   C-Auto                               -- KW["auto"],
   C-Register                           -- KW["register"],
   C-Int                                -- KW["int"],
   C-Char                               -- KW["char"],
   C-Short                              -- KW["short"],
   C-Long                               -- KW["long"],
   C-Float                              -- KW["float"],
   C-Double                             -- KW["double"],
   C-Signed                             -- KW["signed"],
   C-Unsigned                           -- KW["unsigned"],
   C-Void                               -- KW["void"],
   C-Const                              -- KW["const"],
   C-Volatile                           -- KW["volatile"],
   C-Declaration                        -- H[_1 H hs=0[_2 KW[";"]]],
   C-Declaration.1:alt                  -- _1 _1,
   C-Declaration.1:alt.2:iter           -- _1,
   C-Declaration.2:iter-star-sep        -- H hs=0[_1 KW[","]],
   C-Declaration2                       -- H[_1 H hs=0[_2 KW[";"]]],
   C-Declaration2.2:iter-star-sep       -- H hs=0[_1 KW[","]],
   C-Declaration2.1:alt                 -- _1 _1,
   C-IdDeclInit                         -- H[_1 KW["="] _2],
   C-DeclInit                           -- H[_1 KW["="] _2],
   C-ArrayInit                          -- KW["{"] _1 KW["}"],
   C-ArrayInit.1:iter-sep               -- _1 KW[","],
   C-ArrayInitIncomplete                -- KW["{"] _1 KW[","] KW["}"],
   C-ArrayInitIncomplete.1:iter-sep     -- _1 KW[","],
   C-AssignInit                         -- _1,
   C-TypeSpec                           -- H[_1 _2 _3],
   C-TypeSpec.1:iter-star               -- _1,
   C-TypeSpec.3:iter-star               -- _1,
   C-TypeSpec.3:iter-star.1:alt         -- _1 _2,
   C-DQualifiers                        -- _1 _2 _3,
   C-DQualifiers.1:iter-star            -- _1,
   C-DQualifiers.3:iter-star            -- _1,
   C-DeclSpec                           -- _1 _2 _3 _4 _5,
   C-DeclSpec.1:iter-star               -- _1,
   C-DeclSpec.3:iter-star               -- _1,
   C-DeclSpec.5:iter-star               -- _1,
   C-DeclSpec.5:iter-star.1:alt         -- _1 _2,
   C-Id                                 -- _1,
   C-TypeId                             -- _1,
   C-Label                              -- V[H[_1 KW[":"]] _2],
   C-Case                               -- H[KW["case"] _1 KW[":"] _2],
   C-Default                            -- H[KW["default"] KW[":"] _1],
   C-Compound                           -- V[V is=2[KW["{"] _1 _2] KW["}"]],
   C-Compound.1:iter-star               -- _1,
   C-Compound.2:iter-star               -- _1,
   C-Stat                               -- H hs=0[_1 KW[";"]],
   C-If                                 -- V is=2[H hs=0[KW["if"] KW["("] _1 KW[")"]] _2],
   C-IfElse                             -- V[V is=2[H hs=0[KW["if"] KW["("] _1 KW[")"]] _2] V is=2[KW["else"] _3]],
   C-Switch                             -- V is=2[H[KW["switch"] KW["("] _1 KW[")"]] _2],
   C-While                              -- V is=2[H[KW["while"] KW["("] _1 KW[")"]] _2],
   C-DoWhile                            -- V[V is=2[KW["do"] _1] H[KW["while"] KW["("] _2 KW[")"] KW[";"]]],
   C-For                                -- V is=2[H[KW["for"] KW["("] _1 KW[";"] _2 KW[";"] _3 KW[")"]] _4],
   C-Goto                               -- H[KW["goto"] _1 KW[";"]],
   C-Continue                           -- H[KW["continue"] KW[";"]],
   C-Break                              -- H[KW["break"] KW[";"]],
   C-Return                             -- H hs=0[KW["return"] "(" _1 ")" KW[";"]],
   C-Exit                               -- H hs=0[KW["exit"] "(" _1 ")" KW[";"]],
   C-TranslationUnit                    -- V vs=0 is=0 [_1],
   C-TranslationUnit.1:iter             -- _1,
   C-FunDef                             -- V[H[_1 _2] _3],
   C-NoTypeSpecifier                    -- ,
   C-IdDecl                             -- H[_1 _2 _3],
   C-IdDecl.1:iter-star                 -- _1,
   C-IdDecl.3:opt                       -- _1,
   C-FunDecl                            -- H[_1 KW["("] _2 KW[")"] _3],
   C-FunDecl.1:iter-star                -- _1,
   C-FunDecl.3:opt                      -- _1,
   C-TypedefDeclarator1                 -- _1 _2 _3,
   C-TypedefDeclarator1.1:iter-star     -- _1,
   C-TypedefDeclarator1.3:opt           -- _1,
   C-TypedefDeclarator2                 -- _1 KW["("] _2 KW[")"] _3,
   C-TypedefDeclarator2.1:iter-star     -- _1,
   C-TypedefDeclarator2.3:opt           -- _1,
   C-OldFunction1                       -- _1 _2 KW["("] _3 KW[")"],
   C-OldFunction1.1:iter-star           -- _1,
   C-OldFunction1.3:iter-sep            -- _1 KW[","],
   C-OldFunction2                       -- _1 KW["("] _2 KW[")"] _3,
   C-OldFunction2.1:iter-star           -- _1,
   C-OldFunction2.3:opt                 -- _1,
   C-PpControl                          -- H[_1],
   C-PpIf                               -- V[_1 _2 _3 _4 H hs=0[KW["#"] KW["endif"]]],
   C-PpIf.2:iter-star                   -- _1,
   C-PpIf.3:iter-star                   -- _1,
   C-PpIf.3:iter-star.1:seq             -- _1 _2,
   C-PpIf.3:iter-star.1:seq.2:iter-star -- _1,
   C-PpIf.4:opt                         -- _1,
   C-PpIf.4:opt.1:seq                   -- _1 _2,
   C-PpIf.4:opt.1:seq.2:iter-star       -- _1,
   C-IntConst                           -- _1,
   C-HexConst                           -- _1,
   C-OctConst                           -- _1,
   C-FloatConst                         -- _1,
   C-CharConst                          -- _1,
   C-StringLit                          -- _1,
   C-StringLit.1:iter                   -- _1
]
