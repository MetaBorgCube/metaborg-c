templates

	// Prefer so that the name of named parameter declarations are not recognised as a typedef.
	Decl.Decl = <<DeclSpecs> <InitDeclarator+; separator=", ">;> {prefer}
	Decl.Decl = <<DeclSpecs> <InitDeclarator*; separator=", ">;>
	Decl      = <<StaticAssertDecl>>
	
	DeclSpec = <<StoreClassSpec>>
	DeclSpec = <<TypeSpec>>
	DeclSpec = <<TypeQualifier>>
	DeclSpec = <<FuncSpec>>
	DeclSpec = <<AlignSpec>>
	
	DeclSpecs = <<DeclSpec+; separator=" ">>
	
	InitDeclarator                = <<Declarator>>
	InitDeclarator.InitDeclarator = <<Declarator> = <Initializer>>
	
	StoreClassSpec.Typedef     = <typedef>
	StoreClassSpec.Extern      = <extern>
	StoreClassSpec.Static      = <static>
	StoreClassSpec.ThreadLocal = <_Thead_local>
	StoreClassSpec.Auto        = <auto>
	StoreClassSpec.Register    = <register>
	
	TypeSpec.Void = <void>
	TypeSpec.Char = <char>
	TypeSpec.Short = <short>
	TypeSpec.Int = <int>
	TypeSpec.Long = <long>
	TypeSpec.Float = <float>
	TypeSpec.Double = <double>
	TypeSpec.Signed = <signed>
	TypeSpec.Unsigned = <unsigned>
	TypeSpec.Bool = <_Bool>
	TypeSpec.Complex = <_Complex>
	TypeSpec.DeclRef = <<Id>>
	TypeSpec = <<AtomicTypeSpec>>
	TypeSpec = <<StructOrUnionSpec>>
	TypeSpec = <<EnumSpec>>
	
	StructOrUnionSpec.StructSpec = 
		<
			struct <Id?> {
				<StructDecl+; separator="\n">
			}
		>
	StructOrUnionSpec.StructSpec = <struct <Id>>
	StructOrUnionSpec.UnionSpec = 
		<
			union <Id?> {
				<StructDecl+; separator="\n">
			}
		>
	StructOrUnionSpec.UnionSpec  = <union <Id>>
	
	// Prefer so that the name of named field declarations are not recognised as a typedef.
	// Also prefer StructDeclarator over StructBitfieldDeclarator for the same reason.
	StructDecl.FieldDecl = <<SpecifierQualifier+; separator=" "> <StructDeclarator+; separator=", ">;> {prefer}
	StructDecl.FieldDecl = <<SpecifierQualifier+; separator=" "> <StructBitfieldDeclarator*; separator=", ">;>
	StructDecl = <<StaticAssertDecl>>
	
	SpecifierQualifier = <<TypeSpec>>
	SpecifierQualifier = <<TypeQualifier>>
	
	StructDeclarator          = <<Declarator>>
	StructDeclarator.Bitfield = <<Declarator> : <ConstExp>>
	
	StructBitfieldDeclarator.Bitfield = < : <ConstExp>>
	StructBitfieldDeclarator          = <<Declarator>>
	
	EnumSpec.EnumSpec = 
		<
			enum <Id?> {
				<Enumerator+; separator=",\n"><Comma?>
			}
		>
	EnumSpec.EnumSpec = <enum <Id>>
	
	Enumerator.EnumConst = <<Id>>
	Enumerator.EnumConst = <<Id> = <ConstExp>>
	
	AtomicTypeSpec.Atomic = <_Atomic(<TypeName>)>
	
	TypeQualifier.Const = <const>
	TypeQualifier.Restrict = <restrict>
	TypeQualifier.Volatile = <volatile>
	TypeQualifier.Atomic = <_Atomic>
	
	FuncSpec.Inline = <inline>
	FuncSpec.NoReturn = <_Noreturn>
	
	AlignSpec.Alignas = <_Alignas(<TypeName>)>
	AlignSpec.Alignas = <_Alignas(<ConstExp>)>
	
	Declarator.Declarator = <<Ptr?> <DirectDeclarator>> // TODO: Proper constructor name
	
	DirectDeclarator                 = <<Id> >
	DirectDeclarator                 = <(<Declarator>)> {bracket}
	DirectDeclarator.ArrayDeclarator = <<DirectDeclarator>[<TypeQualifier*; separator=" "> <AssignExp?>]> // TODO: Give unique constructor name
	DirectDeclarator.ArrayDeclarator = <<DirectDeclarator>[static <TypeQualifier*; separator=" "> <AssignExp>]> // TODO: Give unique constructor name
	DirectDeclarator.ArrayDeclarator = <<DirectDeclarator>[<TypeQualifier+; separator=" "> static <AssignExp>]> // TODO: Give unique constructor name
	DirectDeclarator.ArrayDeclarator = <<DirectDeclarator>[<TypeQualifier+; separator=" "> *]> // TODO: Give unique constructor name
	DirectDeclarator                 = <<DirectFuncDeclarator>>
	
	FuncDeclarator.Declarator = <<Ptr?> <DirectFuncDeclarator>> // TODO: Proper constructor name
	
	// Prefer over ParamTypeList so that the names in a typeless parameter list do not get treated as TypedefNames.
	DirectFuncDeclarator.FuncDeclarator  = <<DirectDeclarator>(<ParamList>)> {prefer}
	DirectFuncDeclarator.FuncDeclarator  = <<DirectDeclarator>(<ParamTypeList>)>
	
	Ptr.Ptr = <*<TypeQualifier*; separator=" ">>
	Ptr.Ptr = <*<TypeQualifier*; separator=" "><Ptr>>
	
	ParamTypeList.ParamTypeList   = <<ParamDecl*; separator=", ">>
	ParamTypeList.ParamTypeVararg = <<ParamDecl+; separator=", ">, ...>
	
	ParamList.ParamList           = <<Id+; separator=", ">>

	// Avoid so that the first ParamDecl production is chosen if the declaration has a name.
	ParamDecl.ParamDecl = <<DeclSpecs> <AbstractDeclarator?>> {avoid}
	ParamDecl.ParamDecl = <<DeclSpecs> <Declarator>>
	
	TypeName.TypeName = <<SpecifierQualifier+; separator=" "> <AbstractDeclarator?>>
	
	AbstractDeclarator.ADeclarator = <<Ptr>> // TODO: Proper constructor name
	AbstractDeclarator.ADeclarator = <<Ptr?> <DirectAbstractDeclarator>> // TODO: Proper constructor name
	
	DirectAbstractDeclarator = <(<AbstractDeclarator>)> {bracket}
	DirectAbstractDeclarator.ArrayADeclarator = <<DirectAbstractDeclarator?>[<TypeQualifier*; separator=" "> <AssignExp?>]> // TODO: Give unique constructor name
	DirectAbstractDeclarator.ArrayADeclarator = <<DirectAbstractDeclarator?>[static <TypeQualifier*; separator=" "> <AssignExp>]> // TODO: Give unique constructor name
	DirectAbstractDeclarator.ArrayADeclarator = <<DirectAbstractDeclarator?>[<TypeQualifier+; separator=" "> static <AssignExp>]> // TODO: Give unique constructor name
	DirectAbstractDeclarator.ArrayADeclarator = <<DirectAbstractDeclarator?>[*]> // TODO: Give unique constructor name
	DirectAbstractDeclarator.FuncADeclarator  = <<DirectAbstractDeclarator?>(<ParamTypeList>)>
	
	Initializer             = <<AssignExp>>
	Initializer.Initializer = <{<DesignationInit+; separator=", "><Comma?>}>
	
	DesignationInit                 = <<Initializer>> 
	DesignationInit.DesignationInit = <<Designation> <Initializer>> // TODO: Proper constructor name
	
	Designation.Designation = <<Designator+; separator=" "> = >  // TODO: Proper constructor name
	
	Designator.Designator = <[<ConstExp>]> // TODO: Proper constructor name
	Designator.Designator = <.<Id>> // TODO: Proper constructor name
	
	StaticAssertDecl.StaticAssertDecl = <_Static_assert(<ConstExp>, <StringConst>);>