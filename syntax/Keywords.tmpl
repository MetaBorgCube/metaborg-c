lexical syntax

	"auto"     -> Keyword
	"break"    -> Keyword
	"case"     -> Keyword
	"char"     -> Keyword
	"const"    -> Keyword
	"continue" -> Keyword
	"default"  -> Keyword
	"do"       -> Keyword
	"double"   -> Keyword
	"else"     -> Keyword
	"enum"     -> Keyword
	"extern"   -> Keyword
	"float"    -> Keyword
	"for"      -> Keyword
	"goto"     -> Keyword
	"if"       -> Keyword
	"inline"   -> Keyword
	"int"      -> Keyword
	"long"     -> Keyword
	"register" -> Keyword
	"return"   -> Keyword
	"short"    -> Keyword
	"signed"   -> Keyword
	"sizeof"   -> Keyword
	"static"   -> Keyword
	"struct"   -> Keyword
	"switch"   -> Keyword
	"typedef"  -> Keyword
	"union"    -> Keyword
	"unsigned" -> Keyword
	"void"     -> Keyword
	"volatile" -> Keyword
	"while"    -> Keyword
	
	"_Alignas"       -> Keyword
	"_Alignof"       -> Keyword
	"_Atomic"        -> Keyword
	"_Bool"          -> Keyword
	"_Complex"       -> Keyword
	"_Generic"       -> Keyword
	"_Imaginary"     -> Keyword
	"_Noreturn"      -> Keyword
	"_Static_assert" -> Keyword
	"_Thread_local"  -> Keyword
	
lexical restrictions

	"auto"
	"break"
	"case"
	"char"
	"const"
	"continue"
	"default"
	"do"
	"double"
	"else"
	"enum"
	"extern"
	"float"
	"for"
	"goto"
	"if"
	"inline"
	"int"
	"long"
	"register"
	"return"
	"short"
	"signed"
	"sizeof"
	"static"
	"struct"
	"switch"
	"typedef"
	"union"
	"unsigned"
	"void"
	"volatile"
	"while"
	"_Alignas"
	"_Alignof"
	"_Atomic"
	"_Bool"
	"_Complex"
	"_Generic"
	"_Imaginary"
	"_Noreturn"
	"_Static_assert"
	"_Thread_local" -/- [a-zA-Z\_0-9]
