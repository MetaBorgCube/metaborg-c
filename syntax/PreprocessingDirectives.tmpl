lexical syntax

  ~[\ \t\n\/]                           -> TokenChar
  TokenChar+                            -> Token
  ( [\ \t] | ( [\\] [\n] ) | Comment )+ -> TokWS
  ( [\ \t] | Comment )*                 -> WS
  {Token TokWS}+                        -> TokenSeq

lexical restrictions

  Token    -/- ~[\ \t\n\/]
  TokenSeq -/- ~[\ \t\n]
  WS       -/- [\ \t]
	
lexical syntax

  "#" WS "define" WS TokenSeq [\n] -> ControlLine
  "#" WS "undef" WS Id WS [\n]     -> ControlLine
  
  "#" WS "include" WS HeaderName WS [\n] -> ControlLine
  
  "#" WS "line" WS [0-9]+ WS ( "\"" WS FileName WS "\"" )? WS [\n] -> ControlLine
  "#" WS IntConst WS "\"" FileName "\"" WS {LineFlag [\ ]+}* [\n]  -> ControlLine
 
  "#" WS "error" WS TokenSeq? WS [\n]                              -> ControlLine
  "#" WS "pragma" WS TokenSeq? WS [\n]                             -> ControlLine

  "1" -> LineFlag
  "2" -> LineFlag
  "3" -> LineFlag
  "4" -> LineFlag
  
  "#" WS "if" WS ConstExp WS [\n]                                  -> ControlLine
  "#" WS "if" WS Id WS [\n]                                        -> ControlLine
  "#" WS "if" WS Id WS "!=" WS [0-9]+ WS [\n]                      -> ControlLine
  "#" WS "ifdef" WS Id WS [\n]                                     -> ControlLine
  "#" WS "ifndef" WS Id WS [\n]                                    -> ControlLine
  "#" WS "elif" WS ConstExp WS [\n]                                -> ControlLine
  "#" WS "else" WS [\n]                                            -> ControlLine
  "#" WS "endif" WS [\n]                                           -> ControlLine

templates

  ExternalDecl.PP = <<ControlLine>>
  StructDecl.PP   = <<ControlLine>>
  Stm.PP          = <<ControlLine>>
